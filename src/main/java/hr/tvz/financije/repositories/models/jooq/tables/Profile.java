/*
 * This file is generated by jOOQ.
 */
package hr.tvz.financije.repositories.models.jooq.tables;


import hr.tvz.financije.repositories.models.jooq.Keys;
import hr.tvz.financije.repositories.models.jooq.Public;
import hr.tvz.financije.repositories.models.jooq.tables.records.ProfileRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Profile extends TableImpl<ProfileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.profile</code>
     */
    public static final Profile PROFILE = new Profile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfileRecord> getRecordType() {
        return ProfileRecord.class;
    }

    /**
     * The column <code>public.profile.id</code>.
     */
    public final TableField<ProfileRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.profile.username</code>.
     */
    public final TableField<ProfileRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.profile.hashed_password</code>.
     */
    public final TableField<ProfileRecord, String> HASHED_PASSWORD = createField(DSL.name("hashed_password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.profile.salt</code>.
     */
    public final TableField<ProfileRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.CHAR(36).nullable(false), this, "");

    private Profile(Name alias, Table<ProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private Profile(Name alias, Table<ProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.profile</code> table reference
     */
    public Profile(String alias) {
        this(DSL.name(alias), PROFILE);
    }

    /**
     * Create an aliased <code>public.profile</code> table reference
     */
    public Profile(Name alias) {
        this(alias, PROFILE);
    }

    /**
     * Create a <code>public.profile</code> table reference
     */
    public Profile() {
        this(DSL.name("profile"), null);
    }

    public <O extends Record> Profile(Table<O> child, ForeignKey<O, ProfileRecord> key) {
        super(child, key, PROFILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProfileRecord, Integer> getIdentity() {
        return (Identity<ProfileRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProfileRecord> getPrimaryKey() {
        return Keys.PROFILE_PKEY;
    }

    @Override
    public Profile as(String alias) {
        return new Profile(DSL.name(alias), this);
    }

    @Override
    public Profile as(Name alias) {
        return new Profile(alias, this);
    }

    @Override
    public Profile as(Table<?> alias) {
        return new Profile(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Profile rename(String name) {
        return new Profile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Profile rename(Name name) {
        return new Profile(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Profile rename(Table<?> name) {
        return new Profile(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
