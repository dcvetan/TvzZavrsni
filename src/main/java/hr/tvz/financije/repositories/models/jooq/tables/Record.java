/*
 * This file is generated by jOOQ.
 */
package hr.tvz.financije.repositories.models.jooq.tables;


import hr.tvz.financije.repositories.models.jooq.Indexes;
import hr.tvz.financije.repositories.models.jooq.Keys;
import hr.tvz.financije.repositories.models.jooq.Public;
import hr.tvz.financije.repositories.models.jooq.tables.records.RecordRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Record extends TableImpl<RecordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.record</code>
     */
    public static final Record RECORD = new Record();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecordRecord> getRecordType() {
        return RecordRecord.class;
    }

    /**
     * The column <code>public.record.id</code>.
     */
    public final TableField<RecordRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.record.amount</code>.
     */
    public final TableField<RecordRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.record.type</code>.
     */
    public final TableField<RecordRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.record.record_date</code>.
     */
    public final TableField<RecordRecord, LocalDate> RECORD_DATE = createField(DSL.name("record_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.record.description</code>.
     */
    public final TableField<RecordRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.record.account_id</code>.
     */
    public final TableField<RecordRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.record.receiving_account_id</code>.
     */
    public final TableField<RecordRecord, Integer> RECEIVING_ACCOUNT_ID = createField(DSL.name("receiving_account_id"), SQLDataType.INTEGER, this, "");

    private Record(Name alias, Table<RecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private Record(Name alias, Table<RecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.record</code> table reference
     */
    public Record(String alias) {
        this(DSL.name(alias), RECORD);
    }

    /**
     * Create an aliased <code>public.record</code> table reference
     */
    public Record(Name alias) {
        this(alias, RECORD);
    }

    /**
     * Create a <code>public.record</code> table reference
     */
    public Record() {
        this(DSL.name("record"), null);
    }

    public <O extends org.jooq.Record> Record(Table<O> child, ForeignKey<O, RecordRecord> key) {
        super(child, key, RECORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.RECORD_TYPE_RECORD_DATE_IDX);
    }

    @Override
    public Identity<RecordRecord, Integer> getIdentity() {
        return (Identity<RecordRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RecordRecord> getPrimaryKey() {
        return Keys.RECORD_PKEY;
    }

    @Override
    public List<ForeignKey<RecordRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RECORD__RECORD_ACCOUNT_ID_FKEY, Keys.RECORD__RECORD_RECEIVING_ACCOUNT_ID_FKEY);
    }

    private transient Account _recordAccountIdFkey;
    private transient Account _recordReceivingAccountIdFkey;

    /**
     * Get the implicit join path to the <code>public.account</code> table, via
     * the <code>record_account_id_fkey</code> key.
     */
    public Account recordAccountIdFkey() {
        if (_recordAccountIdFkey == null)
            _recordAccountIdFkey = new Account(this, Keys.RECORD__RECORD_ACCOUNT_ID_FKEY);

        return _recordAccountIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.account</code> table, via
     * the <code>record_receiving_account_id_fkey</code> key.
     */
    public Account recordReceivingAccountIdFkey() {
        if (_recordReceivingAccountIdFkey == null)
            _recordReceivingAccountIdFkey = new Account(this, Keys.RECORD__RECORD_RECEIVING_ACCOUNT_ID_FKEY);

        return _recordReceivingAccountIdFkey;
    }

    @Override
    public Record as(String alias) {
        return new Record(DSL.name(alias), this);
    }

    @Override
    public Record as(Name alias) {
        return new Record(alias, this);
    }

    @Override
    public Record as(Table<?> alias) {
        return new Record(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Record rename(String name) {
        return new Record(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Record rename(Name name) {
        return new Record(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Record rename(Table<?> name) {
        return new Record(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, LocalDate, String, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super Integer, ? super String, ? super LocalDate, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super Integer, ? super String, ? super LocalDate, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
