/*
 * This file is generated by jOOQ.
 */
package hr.tvz.financije.repositories.models.jooq;


import hr.tvz.financije.repositories.models.jooq.tables.Account;
import hr.tvz.financije.repositories.models.jooq.tables.Category;
import hr.tvz.financije.repositories.models.jooq.tables.Currency;
import hr.tvz.financije.repositories.models.jooq.tables.Profile;
import hr.tvz.financije.repositories.models.jooq.tables.Record;
import hr.tvz.financije.repositories.models.jooq.tables.records.AccountRecord;
import hr.tvz.financije.repositories.models.jooq.tables.records.CategoryRecord;
import hr.tvz.financije.repositories.models.jooq.tables.records.CurrencyRecord;
import hr.tvz.financije.repositories.models.jooq.tables.records.ProfileRecord;
import hr.tvz.financije.repositories.models.jooq.tables.records.RecordRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<CategoryRecord> CATEGORY_PKEY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<CurrencyRecord> CURRENCY_PKEY = Internal.createUniqueKey(Currency.CURRENCY, DSL.name("currency_pkey"), new TableField[] { Currency.CURRENCY.ID }, true);
    public static final UniqueKey<ProfileRecord> PROFILE_PKEY = Internal.createUniqueKey(Profile.PROFILE, DSL.name("profile_pkey"), new TableField[] { Profile.PROFILE.ID }, true);
    public static final UniqueKey<RecordRecord> RECORD_PKEY = Internal.createUniqueKey(Record.RECORD, DSL.name("record_pkey"), new TableField[] { Record.RECORD.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, CurrencyRecord> ACCOUNT__ACCOUNT_CURRENCY_ID_FKEY = Internal.createForeignKey(Account.ACCOUNT, DSL.name("account_currency_id_fkey"), new TableField[] { Account.ACCOUNT.CURRENCY_ID }, Keys.CURRENCY_PKEY, new TableField[] { Currency.CURRENCY.ID }, true);
    public static final ForeignKey<AccountRecord, ProfileRecord> ACCOUNT__ACCOUNT_PROFILE_ID_FKEY = Internal.createForeignKey(Account.ACCOUNT, DSL.name("account_profile_id_fkey"), new TableField[] { Account.ACCOUNT.PROFILE_ID }, Keys.PROFILE_PKEY, new TableField[] { Profile.PROFILE.ID }, true);
    public static final ForeignKey<CategoryRecord, ProfileRecord> CATEGORY__CATEGORY_PROFILE_ID_FKEY = Internal.createForeignKey(Category.CATEGORY, DSL.name("category_profile_id_fkey"), new TableField[] { Category.CATEGORY.PROFILE_ID }, Keys.PROFILE_PKEY, new TableField[] { Profile.PROFILE.ID }, true);
    public static final ForeignKey<RecordRecord, AccountRecord> RECORD__RECORD_ACCOUNT_ID_FKEY = Internal.createForeignKey(Record.RECORD, DSL.name("record_account_id_fkey"), new TableField[] { Record.RECORD.ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<RecordRecord, AccountRecord> RECORD__RECORD_RECEIVING_ACCOUNT_ID_FKEY = Internal.createForeignKey(Record.RECORD, DSL.name("record_receiving_account_id_fkey"), new TableField[] { Record.RECORD.RECEIVING_ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
}
