/*
 * This file is generated by jOOQ.
 */
package hr.tvz.financije.repositories.entities.jooq.tables.records;


import hr.tvz.financije.repositories.entities.jooq.tables.Currency;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrencyRecord extends UpdatableRecordImpl<CurrencyRecord> implements Record6<Integer, String, String, String, Integer, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.currency.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.currency.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.currency.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.currency.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.currency.code</code>.
     */
    public void setCode(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.currency.code</code>.
     */
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.currency.symbol</code>.
     */
    public void setSymbol(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.currency.symbol</code>.
     */
    public String getSymbol() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.currency.exchange_rate</code>.
     */
    public void setExchangeRate(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.currency.exchange_rate</code>.
     */
    public Integer getExchangeRate() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.currency.last_update_date</code>.
     */
    public void setLastUpdateDate(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.currency.last_update_date</code>.
     */
    public LocalDateTime getLastUpdateDate() {
        return (LocalDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, Integer, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, String, String, String, Integer, LocalDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Currency.CURRENCY.ID;
    }

    @Override
    public Field<String> field2() {
        return Currency.CURRENCY.NAME;
    }

    @Override
    public Field<String> field3() {
        return Currency.CURRENCY.CODE;
    }

    @Override
    public Field<String> field4() {
        return Currency.CURRENCY.SYMBOL;
    }

    @Override
    public Field<Integer> field5() {
        return Currency.CURRENCY.EXCHANGE_RATE;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Currency.CURRENCY.LAST_UPDATE_DATE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getCode();
    }

    @Override
    public String component4() {
        return getSymbol();
    }

    @Override
    public Integer component5() {
        return getExchangeRate();
    }

    @Override
    public LocalDateTime component6() {
        return getLastUpdateDate();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getCode();
    }

    @Override
    public String value4() {
        return getSymbol();
    }

    @Override
    public Integer value5() {
        return getExchangeRate();
    }

    @Override
    public LocalDateTime value6() {
        return getLastUpdateDate();
    }

    @Override
    public CurrencyRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CurrencyRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public CurrencyRecord value3(String value) {
        setCode(value);
        return this;
    }

    @Override
    public CurrencyRecord value4(String value) {
        setSymbol(value);
        return this;
    }

    @Override
    public CurrencyRecord value5(Integer value) {
        setExchangeRate(value);
        return this;
    }

    @Override
    public CurrencyRecord value6(LocalDateTime value) {
        setLastUpdateDate(value);
        return this;
    }

    @Override
    public CurrencyRecord values(Integer value1, String value2, String value3, String value4, Integer value5, LocalDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CurrencyRecord
     */
    public CurrencyRecord() {
        super(Currency.CURRENCY);
    }

    /**
     * Create a detached, initialised CurrencyRecord
     */
    public CurrencyRecord(Integer id, String name, String code, String symbol, Integer exchangeRate, LocalDateTime lastUpdateDate) {
        super(Currency.CURRENCY);

        setId(id);
        setName(name);
        setCode(code);
        setSymbol(symbol);
        setExchangeRate(exchangeRate);
        setLastUpdateDate(lastUpdateDate);
        resetChangedOnNotNull();
    }
}
